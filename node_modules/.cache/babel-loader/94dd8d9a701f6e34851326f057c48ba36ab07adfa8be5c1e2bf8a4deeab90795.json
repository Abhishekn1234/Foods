{"ast":null,"code":"var _jsxFileName = \"C:\\\\mern stack-project\\\\Food ordering\\\\frontend\\\\src\\\\components\\\\Contextreducer.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\n// ContextReducer.js\nimport React, { createContext, useContext, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartStateContext = /*#__PURE__*/createContext();\nconst CartDispatchContext = /*#__PURE__*/createContext();\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_TO_CART':\n      const existingCartItemIndex = state.findIndex(item => item.name === action.payload.name && item.option === action.payload.option);\n      if (existingCartItemIndex !== -1) {\n        // If the same item with the same option is already in the cart, update its quantity\n        return state.map((item, index) => index === existingCartItemIndex ? {\n          ...item,\n          quantity: item.quantity + action.payload.quantity\n        } : item);\n      } else {\n        // If it's a new item or a new option, add it to the cart\n        return [...state, action.payload];\n      }\n    case 'SET_CART':\n      return action.payload;\n    case 'UPDATE_QUANTITY':\n      return state.map((item, index) => index === action.payload.index ? {\n        ...item,\n        quantity: action.payload.quantity\n      } : item);\n    case 'REMOVE_FROM_CART':\n      return state.filter((_, index) => index !== action.payload);\n    case 'CLEAR_CART':\n      return [];\n    case 'UPDATE_CART':\n      return action.payload;\n    case 'SET_USER':\n      // Simply return the state without modifying it as the user context handles user data\n      return state;\n    default:\n      return state;\n  }\n};\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const storedCart = JSON.parse(localStorage.getItem('cart')) || [];\n  const [state, dispatch] = useReducer(reducer, storedCart);\n  return /*#__PURE__*/_jsxDEV(CartDispatchContext.Provider, {\n    value: dispatch,\n    children: /*#__PURE__*/_jsxDEV(CartStateContext.Provider, {\n      value: state,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"nJpOE6VuoqlDhakPi5tSfZiTedo=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  return useContext(CartStateContext);\n};\n_s2(useCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const useDispatchCart = () => {\n  _s3();\n  return useContext(CartDispatchContext);\n};\n_s3(useDispatchCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default reducer;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","jsxDEV","_jsxDEV","CartStateContext","CartDispatchContext","reducer","state","action","type","existingCartItemIndex","findIndex","item","name","payload","option","map","index","quantity","filter","_","CartProvider","children","_s","storedCart","JSON","parse","localStorage","getItem","dispatch","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","useDispatchCart","_s3","$RefreshReg$"],"sources":["C:/mern stack-project/Food ordering/frontend/src/components/Contextreducer.js"],"sourcesContent":["// ContextReducer.js\r\nimport React, { createContext, useContext, useReducer } from 'react';\r\n\r\nconst CartStateContext = createContext();\r\nconst CartDispatchContext = createContext();\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_TO_CART':\r\n      const existingCartItemIndex = state.findIndex(item => (\r\n        item.name === action.payload.name && item.option === action.payload.option\r\n      ));\r\n\r\n      if (existingCartItemIndex !== -1) {\r\n        // If the same item with the same option is already in the cart, update its quantity\r\n        return state.map((item, index) =>\r\n          index === existingCartItemIndex ? { ...item, quantity: item.quantity + action.payload.quantity } : item\r\n        );\r\n      } else {\r\n        // If it's a new item or a new option, add it to the cart\r\n        return [...state, action.payload];\r\n      }\r\n      case 'SET_CART':\r\n        return action.payload;\r\n    case 'UPDATE_QUANTITY':\r\n      return state.map((item, index) =>\r\n        index === action.payload.index ? { ...item, quantity: action.payload.quantity } : item\r\n      );\r\n    case 'REMOVE_FROM_CART':\r\n      return state.filter((_, index) => index !== action.payload);\r\n    case 'CLEAR_CART':\r\n      return [];\r\n    case 'UPDATE_CART':\r\n      return action.payload;\r\n    case 'SET_USER':\r\n      // Simply return the state without modifying it as the user context handles user data\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n\r\nexport const CartProvider = ({ children }) => {\r\n  const storedCart = JSON.parse(localStorage.getItem('cart')) || [];\r\n  const [state, dispatch] = useReducer(reducer, storedCart);\r\n\r\n  return (\r\n    <CartDispatchContext.Provider value={dispatch}>\r\n      <CartStateContext.Provider value={state}>\r\n        {children}\r\n      </CartStateContext.Provider>\r\n    </CartDispatchContext.Provider>\r\n  );\r\n};\r\n\r\n\r\nexport const useCart = () => useContext(CartStateContext);\r\nexport const useDispatchCart = () => useContext(CartDispatchContext);\r\nexport default reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}