{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@jridgewell/set-array'), require('@jridgewell/sourcemap-codec'), require('@jridgewell/trace-mapping')) : typeof define === 'function' && define.amd ? define(['exports', '@jridgewell/set-array', '@jridgewell/sourcemap-codec', '@jridgewell/trace-mapping'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.genMapping = {}, global.setArray, global.sourcemapCodec, global.traceMapping));\n})(this, function (exports, setArray, sourcemapCodec, traceMapping) {\n  'use strict';\n\n  const COLUMN = 0;\n  const SOURCES_INDEX = 1;\n  const SOURCE_LINE = 2;\n  const SOURCE_COLUMN = 3;\n  const NAMES_INDEX = 4;\n  const NO_NAME = -1;\n  /**\n   * Provides the state to generate a sourcemap.\n   */\n  class GenMapping {\n    constructor({\n      file,\n      sourceRoot\n    } = {}) {\n      this._names = new setArray.SetArray();\n      this._sources = new setArray.SetArray();\n      this._sourcesContent = [];\n      this._mappings = [];\n      this.file = file;\n      this.sourceRoot = sourceRoot;\n    }\n  }\n  /**\n   * Typescript doesn't allow friend access to private fields, so this just casts the map into a type\n   * with public access modifiers.\n   */\n  function cast(map) {\n    return map;\n  }\n  function addSegment(map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) {\n    return addSegmentInternal(false, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content);\n  }\n  function addMapping(map, mapping) {\n    return addMappingInternal(false, map, mapping);\n  }\n  /**\n   * Same as `addSegment`, but will only add the segment if it generates useful information in the\n   * resulting map. This only works correctly if segments are added **in order**, meaning you should\n   * not add a segment with a lower generated line/column than one that came before.\n   */\n  const maybeAddSegment = (map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) => {\n    return addSegmentInternal(true, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content);\n  };\n  /**\n   * Same as `addMapping`, but will only add the mapping if it generates useful information in the\n   * resulting map. This only works correctly if mappings are added **in order**, meaning you should\n   * not add a mapping with a lower generated line/column than one that came before.\n   */\n  const maybeAddMapping = (map, mapping) => {\n    return addMappingInternal(true, map, mapping);\n  };\n  /**\n   * Adds/removes the content of the source file to the source map.\n   */\n  function setSourceContent(map, source, content) {\n    const {\n      _sources: sources,\n      _sourcesContent: sourcesContent\n    } = cast(map);\n    sourcesContent[setArray.put(sources, source)] = content;\n  }\n  /**\n   * Returns a sourcemap object (with decoded mappings) suitable for passing to a library that expects\n   * a sourcemap, or to JSON.stringify.\n   */\n  function toDecodedMap(map) {\n    const {\n      _mappings: mappings,\n      _sources: sources,\n      _sourcesContent: sourcesContent,\n      _names: names\n    } = cast(map);\n    removeEmptyFinalLines(mappings);\n    return {\n      version: 3,\n      file: map.file || undefined,\n      names: names.array,\n      sourceRoot: map.sourceRoot || undefined,\n      sources: sources.array,\n      sourcesContent,\n      mappings\n    };\n  }\n  /**\n   * Returns a sourcemap object (with encoded mappings) suitable for passing to a library that expects\n   * a sourcemap, or to JSON.stringify.\n   */\n  function toEncodedMap(map) {\n    const decoded = toDecodedMap(map);\n    return Object.assign(Object.assign({}, decoded), {\n      mappings: sourcemapCodec.encode(decoded.mappings)\n    });\n  }\n  /**\n   * Constructs a new GenMapping, using the already present mappings of the input.\n   */\n  function fromMap(input) {\n    const map = new traceMapping.TraceMap(input);\n    const gen = new GenMapping({\n      file: map.file,\n      sourceRoot: map.sourceRoot\n    });\n    putAll(cast(gen)._names, map.names);\n    putAll(cast(gen)._sources, map.sources);\n    cast(gen)._sourcesContent = map.sourcesContent || map.sources.map(() => null);\n    cast(gen)._mappings = traceMapping.decodedMappings(map);\n    return gen;\n  }\n  /**\n   * Returns an array of high-level mapping objects for every recorded segment, which could then be\n   * passed to the `source-map` library.\n   */\n  function allMappings(map) {\n    const out = [];\n    const {\n      _mappings: mappings,\n      _sources: sources,\n      _names: names\n    } = cast(map);\n    for (let i = 0; i < mappings.length; i++) {\n      const line = mappings[i];\n      for (let j = 0; j < line.length; j++) {\n        const seg = line[j];\n        const generated = {\n          line: i + 1,\n          column: seg[COLUMN]\n        };\n        let source = undefined;\n        let original = undefined;\n        let name = undefined;\n        if (seg.length !== 1) {\n          source = sources.array[seg[SOURCES_INDEX]];\n          original = {\n            line: seg[SOURCE_LINE] + 1,\n            column: seg[SOURCE_COLUMN]\n          };\n          if (seg.length === 5) name = names.array[seg[NAMES_INDEX]];\n        }\n        out.push({\n          generated,\n          source,\n          original,\n          name\n        });\n      }\n    }\n    return out;\n  }\n  // This split declaration is only so that terser can elminiate the static initialization block.\n  function addSegmentInternal(skipable, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) {\n    const {\n      _mappings: mappings,\n      _sources: sources,\n      _sourcesContent: sourcesContent,\n      _names: names\n    } = cast(map);\n    const line = getLine(mappings, genLine);\n    const index = getColumnIndex(line, genColumn);\n    if (!source) {\n      if (skipable && skipSourceless(line, index)) return;\n      return insert(line, index, [genColumn]);\n    }\n    const sourcesIndex = setArray.put(sources, source);\n    const namesIndex = name ? setArray.put(names, name) : NO_NAME;\n    if (sourcesIndex === sourcesContent.length) sourcesContent[sourcesIndex] = content !== null && content !== void 0 ? content : null;\n    if (skipable && skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex)) {\n      return;\n    }\n    return insert(line, index, name ? [genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex] : [genColumn, sourcesIndex, sourceLine, sourceColumn]);\n  }\n  function getLine(mappings, index) {\n    for (let i = mappings.length; i <= index; i++) {\n      mappings[i] = [];\n    }\n    return mappings[index];\n  }\n  function getColumnIndex(line, genColumn) {\n    let index = line.length;\n    for (let i = index - 1; i >= 0; index = i--) {\n      const current = line[i];\n      if (genColumn >= current[COLUMN]) break;\n    }\n    return index;\n  }\n  function insert(array, index, value) {\n    for (let i = array.length; i > index; i--) {\n      array[i] = array[i - 1];\n    }\n    array[index] = value;\n  }\n  function removeEmptyFinalLines(mappings) {\n    const {\n      length\n    } = mappings;\n    let len = length;\n    for (let i = len - 1; i >= 0; len = i, i--) {\n      if (mappings[i].length > 0) break;\n    }\n    if (len < length) mappings.length = len;\n  }\n  function putAll(strarr, array) {\n    for (let i = 0; i < array.length; i++) setArray.put(strarr, array[i]);\n  }\n  function skipSourceless(line, index) {\n    // The start of a line is already sourceless, so adding a sourceless segment to the beginning\n    // doesn't generate any useful information.\n    if (index === 0) return true;\n    const prev = line[index - 1];\n    // If the previous segment is also sourceless, then adding another sourceless segment doesn't\n    // genrate any new information. Else, this segment will end the source/named segment and point to\n    // a sourceless position, which is useful.\n    return prev.length === 1;\n  }\n  function skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex) {\n    // A source/named segment at the start of a line gives position at that genColumn\n    if (index === 0) return false;\n    const prev = line[index - 1];\n    // If the previous segment is sourceless, then we're transitioning to a source.\n    if (prev.length === 1) return false;\n    // If the previous segment maps to the exact same source position, then this segment doesn't\n    // provide any new position information.\n    return sourcesIndex === prev[SOURCES_INDEX] && sourceLine === prev[SOURCE_LINE] && sourceColumn === prev[SOURCE_COLUMN] && namesIndex === (prev.length === 5 ? prev[NAMES_INDEX] : NO_NAME);\n  }\n  function addMappingInternal(skipable, map, mapping) {\n    const {\n      generated,\n      source,\n      original,\n      name,\n      content\n    } = mapping;\n    if (!source) {\n      return addSegmentInternal(skipable, map, generated.line - 1, generated.column, null, null, null, null, null);\n    }\n    return addSegmentInternal(skipable, map, generated.line - 1, generated.column, source, original.line - 1, original.column, name, content);\n  }\n  exports.GenMapping = GenMapping;\n  exports.addMapping = addMapping;\n  exports.addSegment = addSegment;\n  exports.allMappings = allMappings;\n  exports.fromMap = fromMap;\n  exports.maybeAddMapping = maybeAddMapping;\n  exports.maybeAddSegment = maybeAddSegment;\n  exports.setSourceContent = setSourceContent;\n  exports.toDecodedMap = toDecodedMap;\n  exports.toEncodedMap = toEncodedMap;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"names":["COLUMN","SOURCES_INDEX","SOURCE_LINE","SOURCE_COLUMN","NAMES_INDEX","NO_NAME","GenMapping","constructor","file","sourceRoot","_names","setArray","SetArray","_sources","_sourcesContent","_mappings","cast","map","addSegment","genLine","genColumn","source","sourceLine","sourceColumn","name","content","addSegmentInternal","addMapping","mapping","addMappingInternal","maybeAddSegment","maybeAddMapping","setSourceContent","sources","sourcesContent","put","toDecodedMap","mappings","names","removeEmptyFinalLines","version","undefined","array","toEncodedMap","decoded","Object","assign","sourcemapCodec","encode","fromMap","input","traceMapping","TraceMap","gen","putAll","decodedMappings","allMappings","out","i","length","line","j","seg","generated","column","original","push","skipable","getLine","index","getColumnIndex","skipSourceless","insert","sourcesIndex","namesIndex","skipSource","current","value","len","strarr","prev"],"sources":["C:\\mern stack-project\\Food ordering\\frontend\\node_modules\\@jridgewell\\gen-mapping\\src\\sourcemap-segment.ts","C:\\mern stack-project\\Food ordering\\frontend\\node_modules\\@jridgewell\\gen-mapping\\src\\gen-mapping.ts"],"sourcesContent":["type GeneratedColumn = number;\ntype SourcesIndex = number;\ntype SourceLine = number;\ntype SourceColumn = number;\ntype NamesIndex = number;\n\nexport type SourceMapSegment =\n  | [GeneratedColumn]\n  | [GeneratedColumn, SourcesIndex, SourceLine, SourceColumn]\n  | [GeneratedColumn, SourcesIndex, SourceLine, SourceColumn, NamesIndex];\n\nexport const COLUMN = 0;\nexport const SOURCES_INDEX = 1;\nexport const SOURCE_LINE = 2;\nexport const SOURCE_COLUMN = 3;\nexport const NAMES_INDEX = 4;\n","import { SetArray, put } from '@jridgewell/set-array';\nimport { encode } from '@jridgewell/sourcemap-codec';\nimport { TraceMap, decodedMappings } from '@jridgewell/trace-mapping';\n\nimport {\n  COLUMN,\n  SOURCES_INDEX,\n  SOURCE_LINE,\n  SOURCE_COLUMN,\n  NAMES_INDEX,\n} from './sourcemap-segment';\n\nimport type { SourceMapInput } from '@jridgewell/trace-mapping';\nimport type { SourceMapSegment } from './sourcemap-segment';\nimport type { DecodedSourceMap, EncodedSourceMap, Pos, Mapping } from './types';\n\nexport type { DecodedSourceMap, EncodedSourceMap, Mapping };\n\nexport type Options = {\n  file?: string | null;\n  sourceRoot?: string | null;\n};\n\nconst NO_NAME = -1;\n\n/**\n * Provides the state to generate a sourcemap.\n */\nexport class GenMapping {\n  private declare _names;\n  private declare _sources;\n  private declare _sourcesContent: (string | null)[];\n  private declare _mappings: SourceMapSegment[][];\n  declare file: string | null | undefined;\n  declare sourceRoot: string | null | undefined;\n\n  constructor({ file, sourceRoot }: Options = {}) {\n    this._names = new SetArray();\n    this._sources = new SetArray();\n    this._sourcesContent = [];\n    this._mappings = [];\n    this.file = file;\n    this.sourceRoot = sourceRoot;\n  }\n}\n\ninterface PublicMap {\n  _names: GenMapping['_names'];\n  _sources: GenMapping['_sources'];\n  _sourcesContent: GenMapping['_sourcesContent'];\n  _mappings: GenMapping['_mappings'];\n}\n\n/**\n * Typescript doesn't allow friend access to private fields, so this just casts the map into a type\n * with public access modifiers.\n */\nfunction cast(map: unknown): PublicMap {\n  return map as any;\n}\n\n/**\n * A low-level API to associate a generated position with an original source position. Line and\n * column here are 0-based, unlike `addMapping`.\n */\nexport function addSegment(\n  map: GenMapping,\n  genLine: number,\n  genColumn: number,\n  source?: null,\n  sourceLine?: null,\n  sourceColumn?: null,\n  name?: null,\n  content?: null,\n): void;\nexport function addSegment(\n  map: GenMapping,\n  genLine: number,\n  genColumn: number,\n  source: string,\n  sourceLine: number,\n  sourceColumn: number,\n  name?: null,\n  content?: string | null,\n): void;\nexport function addSegment(\n  map: GenMapping,\n  genLine: number,\n  genColumn: number,\n  source: string,\n  sourceLine: number,\n  sourceColumn: number,\n  name: string,\n  content?: string | null,\n): void;\nexport function addSegment(\n  map: GenMapping,\n  genLine: number,\n  genColumn: number,\n  source?: string | null,\n  sourceLine?: number | null,\n  sourceColumn?: number | null,\n  name?: string | null,\n  content?: string | null,\n): void {\n  return addSegmentInternal(\n    false,\n    map,\n    genLine,\n    genColumn,\n    source,\n    sourceLine,\n    sourceColumn,\n    name,\n    content,\n  );\n}\n\n/**\n * A high-level API to associate a generated position with an original source position. Line is\n * 1-based, but column is 0-based, due to legacy behavior in `source-map` library.\n */\nexport function addMapping(\n  map: GenMapping,\n  mapping: {\n    generated: Pos;\n    source?: null;\n    original?: null;\n    name?: null;\n    content?: null;\n  },\n): void;\nexport function addMapping(\n  map: GenMapping,\n  mapping: {\n    generated: Pos;\n    source: string;\n    original: Pos;\n    name?: null;\n    content?: string | null;\n  },\n): void;\nexport function addMapping(\n  map: GenMapping,\n  mapping: {\n    generated: Pos;\n    source: string;\n    original: Pos;\n    name: string;\n    content?: string | null;\n  },\n): void;\nexport function addMapping(\n  map: GenMapping,\n  mapping: {\n    generated: Pos;\n    source?: string | null;\n    original?: Pos | null;\n    name?: string | null;\n    content?: string | null;\n  },\n): void {\n  return addMappingInternal(false, map, mapping as Parameters<typeof addMappingInternal>[2]);\n}\n\n/**\n * Same as `addSegment`, but will only add the segment if it generates useful information in the\n * resulting map. This only works correctly if segments are added **in order**, meaning you should\n * not add a segment with a lower generated line/column than one that came before.\n */\nexport const maybeAddSegment: typeof addSegment = (\n  map,\n  genLine,\n  genColumn,\n  source,\n  sourceLine,\n  sourceColumn,\n  name,\n  content,\n) => {\n  return addSegmentInternal(\n    true,\n    map,\n    genLine,\n    genColumn,\n    source,\n    sourceLine,\n    sourceColumn,\n    name,\n    content,\n  );\n};\n\n/**\n * Same as `addMapping`, but will only add the mapping if it generates useful information in the\n * resulting map. This only works correctly if mappings are added **in order**, meaning you should\n * not add a mapping with a lower generated line/column than one that came before.\n */\nexport const maybeAddMapping: typeof addMapping = (map, mapping) => {\n  return addMappingInternal(true, map, mapping as Parameters<typeof addMappingInternal>[2]);\n};\n\n/**\n * Adds/removes the content of the source file to the source map.\n */\nexport function setSourceContent(map: GenMapping, source: string, content: string | null): void {\n  const { _sources: sources, _sourcesContent: sourcesContent } = cast(map);\n  sourcesContent[put(sources, source)] = content;\n}\n\n/**\n * Returns a sourcemap object (with decoded mappings) suitable for passing to a library that expects\n * a sourcemap, or to JSON.stringify.\n */\nexport function toDecodedMap(map: GenMapping): DecodedSourceMap {\n  const {\n    _mappings: mappings,\n    _sources: sources,\n    _sourcesContent: sourcesContent,\n    _names: names,\n  } = cast(map);\n  removeEmptyFinalLines(mappings);\n\n  return {\n    version: 3,\n    file: map.file || undefined,\n    names: names.array,\n    sourceRoot: map.sourceRoot || undefined,\n    sources: sources.array,\n    sourcesContent,\n    mappings,\n  };\n}\n\n/**\n * Returns a sourcemap object (with encoded mappings) suitable for passing to a library that expects\n * a sourcemap, or to JSON.stringify.\n */\nexport function toEncodedMap(map: GenMapping): EncodedSourceMap {\n  const decoded = toDecodedMap(map);\n  return {\n    ...decoded,\n    mappings: encode(decoded.mappings as SourceMapSegment[][]),\n  };\n}\n\n/**\n * Constructs a new GenMapping, using the already present mappings of the input.\n */\nexport function fromMap(input: SourceMapInput): GenMapping {\n  const map = new TraceMap(input);\n  const gen = new GenMapping({ file: map.file, sourceRoot: map.sourceRoot });\n\n  putAll(cast(gen)._names, map.names);\n  putAll(cast(gen)._sources, map.sources as string[]);\n  cast(gen)._sourcesContent = map.sourcesContent || map.sources.map(() => null);\n  cast(gen)._mappings = decodedMappings(map) as GenMapping['_mappings'];\n\n  return gen;\n}\n\n/**\n * Returns an array of high-level mapping objects for every recorded segment, which could then be\n * passed to the `source-map` library.\n */\nexport function allMappings(map: GenMapping): Mapping[] {\n  const out: Mapping[] = [];\n  const { _mappings: mappings, _sources: sources, _names: names } = cast(map);\n\n  for (let i = 0; i < mappings.length; i++) {\n    const line = mappings[i];\n    for (let j = 0; j < line.length; j++) {\n      const seg = line[j];\n\n      const generated = { line: i + 1, column: seg[COLUMN] };\n      let source: string | undefined = undefined;\n      let original: Pos | undefined = undefined;\n      let name: string | undefined = undefined;\n\n      if (seg.length !== 1) {\n        source = sources.array[seg[SOURCES_INDEX]];\n        original = { line: seg[SOURCE_LINE] + 1, column: seg[SOURCE_COLUMN] };\n\n        if (seg.length === 5) name = names.array[seg[NAMES_INDEX]];\n      }\n\n      out.push({ generated, source, original, name } as Mapping);\n    }\n  }\n\n  return out;\n}\n\n// This split declaration is only so that terser can elminiate the static initialization block.\nfunction addSegmentInternal<S extends string | null | undefined>(\n  skipable: boolean,\n  map: GenMapping,\n  genLine: number,\n  genColumn: number,\n  source: S,\n  sourceLine: S extends string ? number : null | undefined,\n  sourceColumn: S extends string ? number : null | undefined,\n  name: S extends string ? string | null | undefined : null | undefined,\n  content: S extends string ? string | null | undefined : null | undefined,\n): void {\n  const {\n    _mappings: mappings,\n    _sources: sources,\n    _sourcesContent: sourcesContent,\n    _names: names,\n  } = cast(map);\n  const line = getLine(mappings, genLine);\n  const index = getColumnIndex(line, genColumn);\n\n  if (!source) {\n    if (skipable && skipSourceless(line, index)) return;\n    return insert(line, index, [genColumn]);\n  }\n\n  // Sigh, TypeScript can't figure out sourceLine and sourceColumn aren't nullish if source\n  // isn't nullish.\n  assert<number>(sourceLine);\n  assert<number>(sourceColumn);\n\n  const sourcesIndex = put(sources, source);\n  const namesIndex = name ? put(names, name) : NO_NAME;\n  if (sourcesIndex === sourcesContent.length) sourcesContent[sourcesIndex] = content ?? null;\n\n  if (skipable && skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex)) {\n    return;\n  }\n\n  return insert(\n    line,\n    index,\n    name\n      ? [genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex]\n      : [genColumn, sourcesIndex, sourceLine, sourceColumn],\n  );\n}\n\nfunction assert<T>(_val: unknown): asserts _val is T {\n  // noop.\n}\n\nfunction getLine(mappings: SourceMapSegment[][], index: number): SourceMapSegment[] {\n  for (let i = mappings.length; i <= index; i++) {\n    mappings[i] = [];\n  }\n  return mappings[index];\n}\n\nfunction getColumnIndex(line: SourceMapSegment[], genColumn: number): number {\n  let index = line.length;\n  for (let i = index - 1; i >= 0; index = i--) {\n    const current = line[i];\n    if (genColumn >= current[COLUMN]) break;\n  }\n  return index;\n}\n\nfunction insert<T>(array: T[], index: number, value: T) {\n  for (let i = array.length; i > index; i--) {\n    array[i] = array[i - 1];\n  }\n  array[index] = value;\n}\n\nfunction removeEmptyFinalLines(mappings: SourceMapSegment[][]) {\n  const { length } = mappings;\n  let len = length;\n  for (let i = len - 1; i >= 0; len = i, i--) {\n    if (mappings[i].length > 0) break;\n  }\n  if (len < length) mappings.length = len;\n}\n\nfunction putAll(strarr: SetArray, array: string[]) {\n  for (let i = 0; i < array.length; i++) put(strarr, array[i]);\n}\n\nfunction skipSourceless(line: SourceMapSegment[], index: number): boolean {\n  // The start of a line is already sourceless, so adding a sourceless segment to the beginning\n  // doesn't generate any useful information.\n  if (index === 0) return true;\n\n  const prev = line[index - 1];\n  // If the previous segment is also sourceless, then adding another sourceless segment doesn't\n  // genrate any new information. Else, this segment will end the source/named segment and point to\n  // a sourceless position, which is useful.\n  return prev.length === 1;\n}\n\nfunction skipSource(\n  line: SourceMapSegment[],\n  index: number,\n  sourcesIndex: number,\n  sourceLine: number,\n  sourceColumn: number,\n  namesIndex: number,\n): boolean {\n  // A source/named segment at the start of a line gives position at that genColumn\n  if (index === 0) return false;\n\n  const prev = line[index - 1];\n\n  // If the previous segment is sourceless, then we're transitioning to a source.\n  if (prev.length === 1) return false;\n\n  // If the previous segment maps to the exact same source position, then this segment doesn't\n  // provide any new position information.\n  return (\n    sourcesIndex === prev[SOURCES_INDEX] &&\n    sourceLine === prev[SOURCE_LINE] &&\n    sourceColumn === prev[SOURCE_COLUMN] &&\n    namesIndex === (prev.length === 5 ? prev[NAMES_INDEX] : NO_NAME)\n  );\n}\n\nfunction addMappingInternal<S extends string | null | undefined>(\n  skipable: boolean,\n  map: GenMapping,\n  mapping: {\n    generated: Pos;\n    source: S;\n    original: S extends string ? Pos : null | undefined;\n    name: S extends string ? string | null | undefined : null | undefined;\n    content: S extends string ? string | null | undefined : null | undefined;\n  },\n) {\n  const { generated, source, original, name, content } = mapping;\n  if (!source) {\n    return addSegmentInternal(\n      skipable,\n      map,\n      generated.line - 1,\n      generated.column,\n      null,\n      null,\n      null,\n      null,\n      null,\n    );\n  }\n  assert<Pos>(original);\n  return addSegmentInternal(\n    skipable,\n    map,\n    generated.line - 1,\n    generated.column,\n    source as string,\n    original.line - 1,\n    original.column,\n    name,\n    content,\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}