{"ast":null,"code":"var _jsxFileName = \"C:\\\\mern stack-project\\\\Food ordering\\\\frontend\\\\src\\\\components\\\\admin\\\\UserActivity.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { CCard, CCardBody, CCardHeader } from '@coreui/react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, PieChart, Pie, Cell, LineChart, Line } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UserActivity() {\n  _s();\n  const [userOrders, setUserOrders] = useState([]);\n  useEffect(() => {\n    async function fetchUserOrders() {\n      try {\n        const response = await axios.get('http://localhost:5000/orderss');\n        setUserOrders(response.data);\n      } catch (error) {\n        console.error('Error fetching user orders:', error);\n      }\n    }\n    fetchUserOrders();\n  }, []);\n\n  // Prepare data for bar chart (category-wise sales distribution)\n  const prepareCategorySalesData = () => {\n    const categorySales = {};\n    userOrders.forEach(order => {\n      order.cartItems.forEach(item => {\n        const {\n          category,\n          price,\n          quantity\n        } = item;\n        if (categorySales[category]) {\n          categorySales[category] += price * quantity;\n        } else {\n          categorySales[category] = price * quantity;\n        }\n      });\n    });\n    return Object.entries(categorySales).map(([category, totalSales]) => ({\n      category,\n      totalSales\n    }));\n  };\n\n  // Prepare data for line chart (sales trend over time)\n  const prepareSalesTrendData = () => {\n    const salesTrendData = [];\n    const salesByDate = {};\n    userOrders.forEach(order => {\n      const orderDate = new Date(order.createdAt).toLocaleDateString();\n      if (salesByDate[orderDate]) {\n        salesByDate[orderDate] += order.cartItems.reduce((acc, item) => acc + item.price * item.quantity, 0);\n      } else {\n        salesByDate[orderDate] = order.cartItems.reduce((acc, item) => acc + item.price * item.quantity, 0);\n      }\n    });\n    for (const date in salesByDate) {\n      salesTrendData.push({\n        date,\n        totalSales: salesByDate[date]\n      });\n    }\n    return salesTrendData;\n  };\n  // Calculate total sales per user\n  const calculateTotalSalesPerUser = () => {\n    const totalSalesPerUser = {};\n    userOrders.forEach(order => {\n      const {\n        Name,\n        cartItems\n      } = order;\n      const totalSale = cartItems.reduce((acc, item) => acc + item.price * item.quantity, 0);\n      if (totalSalesPerUser[Name]) {\n        totalSalesPerUser[Name] += totalSale;\n      } else {\n        totalSalesPerUser[Name] = totalSale;\n      }\n    });\n    return totalSalesPerUser;\n  };\n\n  // Prepare data for bar chart\n  const prepareBarChartData = () => {\n    const data = [];\n    const totalSalesPerUser = calculateTotalSalesPerUser();\n    for (const user in totalSalesPerUser) {\n      data.push({\n        name: user,\n        sales: totalSalesPerUser[user]\n      });\n    }\n    return data;\n  };\n\n  // Prepare data for pie chart (payment method distribution)\n  const preparePaymentMethodData = () => {\n    const paymentMethods = {};\n    userOrders.forEach(order => {\n      const method = order.payment.method;\n      if (paymentMethods[method]) {\n        paymentMethods[method]++;\n      } else {\n        paymentMethods[method] = 1;\n      }\n    });\n    return Object.entries(paymentMethods).map(([method, count]) => ({\n      name: method,\n      value: count\n    }));\n  };\n\n  // Calculate top selling products\n  const calculateTopSellingProducts = () => {\n    const productSalesMap = new Map();\n    userOrders.forEach(order => {\n      order.cartItems.forEach(item => {\n        const {\n          name,\n          quantity\n        } = item;\n        if (productSalesMap.has(name)) {\n          productSalesMap.set(name, productSalesMap.get(name) + quantity);\n        } else {\n          productSalesMap.set(name, quantity);\n        }\n      });\n    });\n    // Sort the products by quantity sold in descending order\n    const sortedProducts = Array.from(productSalesMap.entries()).sort((a, b) => b[1] - a[1]);\n    // Take top 5 products\n    return sortedProducts.slice(0, 5);\n  };\n  const topSellingProducts = calculateTopSellingProducts();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"User Activity\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CCard, {\n      children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n        children: \"User Sales Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CCardBody, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'space-around',\n            marginBottom: '20px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(BarChart, {\n            width: 400,\n            height: 300,\n            data: prepareBarChartData(),\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              dataKey: \"sales\",\n              fill: \"#8884d8\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(PieChart, {\n            width: 400,\n            height: 300,\n            children: [/*#__PURE__*/_jsxDEV(Pie, {\n              data: preparePaymentMethodData(),\n              dataKey: \"value\",\n              nameKey: \"name\",\n              cx: \"50%\",\n              cy: \"50%\",\n              outerRadius: 80,\n              fill: \"#8884d8\",\n              label: true,\n              children: preparePaymentMethodData().map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n                fill: `#${Math.floor(Math.random() * 16777215).toString(16)}`\n              }, `cell-${index}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 68\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LineChart, {\n          width: 600,\n          height: 300,\n          data: userOrders,\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: \"totalSales\",\n            stroke: \"#8884d8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Top Selling Products\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: topSellingProducts.map(([productName, quantity]) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [productName, \": \", quantity, \" units\"]\n            }, productName, true, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CCard, {\n      children: /*#__PURE__*/_jsxDEV(CCardBody, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'space-around',\n            marginBottom: '20px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(BarChart, {\n            width: 400,\n            height: 300,\n            data: prepareCategorySalesData(),\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Bar, {\n              dataKey: \"totalSales\",\n              fill: \"#8884d8\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(LineChart, {\n            width: 400,\n            height: 300,\n            data: prepareSalesTrendData(),\n            children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n              strokeDasharray: \"3 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Line, {\n              type: \"monotone\",\n              dataKey: \"totalSales\",\n              stroke: \"#8884d8\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}\n_s(UserActivity, \"+KJ2BdZVUDJbaVeEWE/t5XWvDXk=\");\n_c = UserActivity;\nvar _c;\n$RefreshReg$(_c, \"UserActivity\");","map":{"version":3,"names":["React","useEffect","useState","axios","CCard","CCardBody","CCardHeader","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","PieChart","Pie","Cell","LineChart","Line","jsxDEV","_jsxDEV","UserActivity","_s","userOrders","setUserOrders","fetchUserOrders","response","get","data","error","console","prepareCategorySalesData","categorySales","forEach","order","cartItems","item","category","price","quantity","Object","entries","map","totalSales","prepareSalesTrendData","salesTrendData","salesByDate","orderDate","Date","createdAt","toLocaleDateString","reduce","acc","date","push","calculateTotalSalesPerUser","totalSalesPerUser","Name","totalSale","prepareBarChartData","user","name","sales","preparePaymentMethodData","paymentMethods","method","payment","count","value","calculateTopSellingProducts","productSalesMap","Map","has","set","sortedProducts","Array","from","sort","a","b","slice","topSellingProducts","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","justifyContent","marginBottom","width","height","strokeDasharray","dataKey","fill","nameKey","cx","cy","outerRadius","label","entry","index","Math","floor","random","toString","type","stroke","productName","_c","$RefreshReg$"],"sources":["C:/mern stack-project/Food ordering/frontend/src/components/admin/UserActivity.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { CCard, CCardBody, CCardHeader } from '@coreui/react';\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, PieChart, Pie, Cell, LineChart, Line } from 'recharts';\r\n\r\nexport default function UserActivity() {\r\n  const [userOrders, setUserOrders] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchUserOrders() {\r\n      try {\r\n        const response = await axios.get('http://localhost:5000/orderss');\r\n        setUserOrders(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching user orders:', error);\r\n      }\r\n    }\r\n  \r\n    fetchUserOrders();\r\n  }, []);\r\n  \r\n  // Prepare data for bar chart (category-wise sales distribution)\r\n  const prepareCategorySalesData = () => {\r\n    const categorySales = {};\r\n    userOrders.forEach(order => {\r\n      order.cartItems.forEach(item => {\r\n        const { category, price, quantity } = item;\r\n        if (categorySales[category]) {\r\n          categorySales[category] += price * quantity;\r\n        } else {\r\n          categorySales[category] = price * quantity;\r\n        }\r\n      });\r\n    });\r\n    return Object.entries(categorySales).map(([category, totalSales]) => ({ category, totalSales }));\r\n  };\r\n\r\n  // Prepare data for line chart (sales trend over time)\r\n  const prepareSalesTrendData = () => {\r\n    const salesTrendData = [];\r\n    const salesByDate = {};\r\n    userOrders.forEach(order => {\r\n      const orderDate = new Date(order.createdAt).toLocaleDateString();\r\n      if (salesByDate[orderDate]) {\r\n        salesByDate[orderDate] += order.cartItems.reduce((acc, item) => acc + item.price * item.quantity, 0);\r\n      } else {\r\n        salesByDate[orderDate] = order.cartItems.reduce((acc, item) => acc + item.price * item.quantity, 0);\r\n      }\r\n    });\r\n    for (const date in salesByDate) {\r\n      salesTrendData.push({ date, totalSales: salesByDate[date] });\r\n    }\r\n    return salesTrendData;\r\n  };\r\n  // Calculate total sales per user\r\n  const calculateTotalSalesPerUser = () => {\r\n    const totalSalesPerUser = {};\r\n    userOrders.forEach(order => {\r\n      const { Name, cartItems } = order;\r\n      const totalSale = cartItems.reduce((acc, item) => acc + item.price * item.quantity, 0);\r\n      if (totalSalesPerUser[Name]) {\r\n        totalSalesPerUser[Name] += totalSale;\r\n      } else {\r\n        totalSalesPerUser[Name] = totalSale;\r\n      }\r\n    });\r\n    return totalSalesPerUser;\r\n  };\r\n\r\n  // Prepare data for bar chart\r\n  const prepareBarChartData = () => {\r\n    const data = [];\r\n    const totalSalesPerUser = calculateTotalSalesPerUser();\r\n    for (const user in totalSalesPerUser) {\r\n      data.push({ name: user, sales: totalSalesPerUser[user] });\r\n    }\r\n    return data;\r\n  };\r\n\r\n  // Prepare data for pie chart (payment method distribution)\r\n  const preparePaymentMethodData = () => {\r\n    const paymentMethods = {};\r\n    userOrders.forEach(order => {\r\n      const method = order.payment.method;\r\n      if (paymentMethods[method]) {\r\n        paymentMethods[method]++;\r\n      } else {\r\n        paymentMethods[method] = 1;\r\n      }\r\n    });\r\n    return Object.entries(paymentMethods).map(([method, count]) => ({ name: method, value: count }));\r\n  };\r\n\r\n  // Calculate top selling products\r\n  const calculateTopSellingProducts = () => {\r\n    const productSalesMap = new Map();\r\n    userOrders.forEach(order => {\r\n      order.cartItems.forEach(item => {\r\n        const { name, quantity } = item;\r\n        if (productSalesMap.has(name)) {\r\n          productSalesMap.set(name, productSalesMap.get(name) + quantity);\r\n        } else {\r\n          productSalesMap.set(name, quantity);\r\n        }\r\n      });\r\n    });\r\n    // Sort the products by quantity sold in descending order\r\n    const sortedProducts = Array.from(productSalesMap.entries()).sort((a, b) => b[1] - a[1]);\r\n    // Take top 5 products\r\n    return sortedProducts.slice(0, 5);\r\n  };\r\n\r\n  const topSellingProducts = calculateTopSellingProducts();\r\n\r\n  return (\r\n    <div>\r\n      <h1>User Activity</h1>\r\n      <CCard>\r\n        <CCardHeader>\r\n          User Sales Summary\r\n        </CCardHeader>\r\n        <CCardBody>\r\n          <div style={{ display: 'flex', justifyContent: 'space-around', marginBottom: '20px' }}>\r\n            <BarChart width={400} height={300} data={prepareBarChartData()}>\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"name\" />\r\n              <YAxis />\r\n              <Tooltip />\r\n              <Legend />\r\n              <Bar dataKey=\"sales\" fill=\"#8884d8\" />\r\n            </BarChart>\r\n            <PieChart width={400} height={300}>\r\n              <Pie data={preparePaymentMethodData()} dataKey=\"value\" nameKey=\"name\" cx=\"50%\" cy=\"50%\" outerRadius={80} fill=\"#8884d8\" label>\r\n                {\r\n                  preparePaymentMethodData().map((entry, index) => <Cell key={`cell-${index}`} fill={`#${Math.floor(Math.random() * 16777215).toString(16)}`} />)\r\n                }\r\n              </Pie>\r\n              <Tooltip />\r\n              <Legend />\r\n            </PieChart>\r\n          </div>\r\n          <LineChart width={600} height={300} data={userOrders}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"date\" />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Legend />\r\n            <Line type=\"monotone\" dataKey=\"totalSales\" stroke=\"#8884d8\" />\r\n          </LineChart>\r\n          <div>\r\n            <h3>Top Selling Products</h3>\r\n            <ul>\r\n              {topSellingProducts.map(([productName, quantity]) => (\r\n                <li key={productName}>{productName}: {quantity} units</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </CCardBody>\r\n      </CCard>\r\n      <CCard>\r\n       \r\n        <CCardBody>\r\n          <div style={{ display: 'flex', justifyContent: 'space-around', marginBottom: '20px' }}>\r\n            {/* Bar Chart for Category-wise Sales Distribution */}\r\n            <BarChart width={400} height={300} data={prepareCategorySalesData()}>\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"category\" />\r\n              <YAxis />\r\n              <Tooltip />\r\n              <Legend />\r\n              <Bar dataKey=\"totalSales\" fill=\"#8884d8\" />\r\n            </BarChart>\r\n            {/* Line Chart for Sales Trend over Time */}\r\n            <LineChart width={400} height={300} data={prepareSalesTrendData()}>\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"date\" />\r\n              <YAxis />\r\n              <Tooltip />\r\n              <Legend />\r\n              <Line type=\"monotone\" dataKey=\"totalSales\" stroke=\"#8884d8\" />\r\n            </LineChart>\r\n          </div>\r\n        </CCardBody>\r\n      </CCard>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,EAAEC,SAAS,EAAEC,WAAW,QAAQ,eAAe;AAC7D,SAASC,QAAQ,EAAEC,GAAG,EAAEC,KAAK,EAAEC,KAAK,EAAEC,aAAa,EAAEC,OAAO,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,GAAG,EAAEC,IAAI,EAAEC,SAAS,EAAEC,IAAI,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7H,eAAe,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACrC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAEhDD,SAAS,CAAC,MAAM;IACd,eAAewB,eAAeA,CAAA,EAAG;MAC/B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMvB,KAAK,CAACwB,GAAG,CAAC,+BAA+B,CAAC;QACjEH,aAAa,CAACE,QAAQ,CAACE,IAAI,CAAC;MAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD;IACF;IAEAJ,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMM,wBAAwB,GAAGA,CAAA,KAAM;IACrC,MAAMC,aAAa,GAAG,CAAC,CAAC;IACxBT,UAAU,CAACU,OAAO,CAACC,KAAK,IAAI;MAC1BA,KAAK,CAACC,SAAS,CAACF,OAAO,CAACG,IAAI,IAAI;QAC9B,MAAM;UAAEC,QAAQ;UAAEC,KAAK;UAAEC;QAAS,CAAC,GAAGH,IAAI;QAC1C,IAAIJ,aAAa,CAACK,QAAQ,CAAC,EAAE;UAC3BL,aAAa,CAACK,QAAQ,CAAC,IAAIC,KAAK,GAAGC,QAAQ;QAC7C,CAAC,MAAM;UACLP,aAAa,CAACK,QAAQ,CAAC,GAAGC,KAAK,GAAGC,QAAQ;QAC5C;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,OAAOC,MAAM,CAACC,OAAO,CAACT,aAAa,CAAC,CAACU,GAAG,CAAC,CAAC,CAACL,QAAQ,EAAEM,UAAU,CAAC,MAAM;MAAEN,QAAQ;MAAEM;IAAW,CAAC,CAAC,CAAC;EAClG,CAAC;;EAED;EACA,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;IAClC,MAAMC,cAAc,GAAG,EAAE;IACzB,MAAMC,WAAW,GAAG,CAAC,CAAC;IACtBvB,UAAU,CAACU,OAAO,CAACC,KAAK,IAAI;MAC1B,MAAMa,SAAS,GAAG,IAAIC,IAAI,CAACd,KAAK,CAACe,SAAS,CAAC,CAACC,kBAAkB,CAAC,CAAC;MAChE,IAAIJ,WAAW,CAACC,SAAS,CAAC,EAAE;QAC1BD,WAAW,CAACC,SAAS,CAAC,IAAIb,KAAK,CAACC,SAAS,CAACgB,MAAM,CAAC,CAACC,GAAG,EAAEhB,IAAI,KAAKgB,GAAG,GAAGhB,IAAI,CAACE,KAAK,GAAGF,IAAI,CAACG,QAAQ,EAAE,CAAC,CAAC;MACtG,CAAC,MAAM;QACLO,WAAW,CAACC,SAAS,CAAC,GAAGb,KAAK,CAACC,SAAS,CAACgB,MAAM,CAAC,CAACC,GAAG,EAAEhB,IAAI,KAAKgB,GAAG,GAAGhB,IAAI,CAACE,KAAK,GAAGF,IAAI,CAACG,QAAQ,EAAE,CAAC,CAAC;MACrG;IACF,CAAC,CAAC;IACF,KAAK,MAAMc,IAAI,IAAIP,WAAW,EAAE;MAC9BD,cAAc,CAACS,IAAI,CAAC;QAAED,IAAI;QAAEV,UAAU,EAAEG,WAAW,CAACO,IAAI;MAAE,CAAC,CAAC;IAC9D;IACA,OAAOR,cAAc;EACvB,CAAC;EACD;EACA,MAAMU,0BAA0B,GAAGA,CAAA,KAAM;IACvC,MAAMC,iBAAiB,GAAG,CAAC,CAAC;IAC5BjC,UAAU,CAACU,OAAO,CAACC,KAAK,IAAI;MAC1B,MAAM;QAAEuB,IAAI;QAAEtB;MAAU,CAAC,GAAGD,KAAK;MACjC,MAAMwB,SAAS,GAAGvB,SAAS,CAACgB,MAAM,CAAC,CAACC,GAAG,EAAEhB,IAAI,KAAKgB,GAAG,GAAGhB,IAAI,CAACE,KAAK,GAAGF,IAAI,CAACG,QAAQ,EAAE,CAAC,CAAC;MACtF,IAAIiB,iBAAiB,CAACC,IAAI,CAAC,EAAE;QAC3BD,iBAAiB,CAACC,IAAI,CAAC,IAAIC,SAAS;MACtC,CAAC,MAAM;QACLF,iBAAiB,CAACC,IAAI,CAAC,GAAGC,SAAS;MACrC;IACF,CAAC,CAAC;IACF,OAAOF,iBAAiB;EAC1B,CAAC;;EAED;EACA,MAAMG,mBAAmB,GAAGA,CAAA,KAAM;IAChC,MAAM/B,IAAI,GAAG,EAAE;IACf,MAAM4B,iBAAiB,GAAGD,0BAA0B,CAAC,CAAC;IACtD,KAAK,MAAMK,IAAI,IAAIJ,iBAAiB,EAAE;MACpC5B,IAAI,CAAC0B,IAAI,CAAC;QAAEO,IAAI,EAAED,IAAI;QAAEE,KAAK,EAAEN,iBAAiB,CAACI,IAAI;MAAE,CAAC,CAAC;IAC3D;IACA,OAAOhC,IAAI;EACb,CAAC;;EAED;EACA,MAAMmC,wBAAwB,GAAGA,CAAA,KAAM;IACrC,MAAMC,cAAc,GAAG,CAAC,CAAC;IACzBzC,UAAU,CAACU,OAAO,CAACC,KAAK,IAAI;MAC1B,MAAM+B,MAAM,GAAG/B,KAAK,CAACgC,OAAO,CAACD,MAAM;MACnC,IAAID,cAAc,CAACC,MAAM,CAAC,EAAE;QAC1BD,cAAc,CAACC,MAAM,CAAC,EAAE;MAC1B,CAAC,MAAM;QACLD,cAAc,CAACC,MAAM,CAAC,GAAG,CAAC;MAC5B;IACF,CAAC,CAAC;IACF,OAAOzB,MAAM,CAACC,OAAO,CAACuB,cAAc,CAAC,CAACtB,GAAG,CAAC,CAAC,CAACuB,MAAM,EAAEE,KAAK,CAAC,MAAM;MAAEN,IAAI,EAAEI,MAAM;MAAEG,KAAK,EAAED;IAAM,CAAC,CAAC,CAAC;EAClG,CAAC;;EAED;EACA,MAAME,2BAA2B,GAAGA,CAAA,KAAM;IACxC,MAAMC,eAAe,GAAG,IAAIC,GAAG,CAAC,CAAC;IACjChD,UAAU,CAACU,OAAO,CAACC,KAAK,IAAI;MAC1BA,KAAK,CAACC,SAAS,CAACF,OAAO,CAACG,IAAI,IAAI;QAC9B,MAAM;UAAEyB,IAAI;UAAEtB;QAAS,CAAC,GAAGH,IAAI;QAC/B,IAAIkC,eAAe,CAACE,GAAG,CAACX,IAAI,CAAC,EAAE;UAC7BS,eAAe,CAACG,GAAG,CAACZ,IAAI,EAAES,eAAe,CAAC3C,GAAG,CAACkC,IAAI,CAAC,GAAGtB,QAAQ,CAAC;QACjE,CAAC,MAAM;UACL+B,eAAe,CAACG,GAAG,CAACZ,IAAI,EAAEtB,QAAQ,CAAC;QACrC;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IACF;IACA,MAAMmC,cAAc,GAAGC,KAAK,CAACC,IAAI,CAACN,eAAe,CAAC7B,OAAO,CAAC,CAAC,CAAC,CAACoC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAC,CAAC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC,CAAC;IACxF;IACA,OAAOJ,cAAc,CAACM,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EACnC,CAAC;EAED,MAAMC,kBAAkB,GAAGZ,2BAA2B,CAAC,CAAC;EAExD,oBACEjD,OAAA;IAAA8D,QAAA,gBACE9D,OAAA;MAAA8D,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBlE,OAAA,CAAChB,KAAK;MAAA8E,QAAA,gBACJ9D,OAAA,CAACd,WAAW;QAAA4E,QAAA,EAAC;MAEb;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAa,CAAC,eACdlE,OAAA,CAACf,SAAS;QAAA6E,QAAA,gBACR9D,OAAA;UAAKmE,KAAK,EAAE;YAAEC,OAAO,EAAE,MAAM;YAAEC,cAAc,EAAE,cAAc;YAAEC,YAAY,EAAE;UAAO,CAAE;UAAAR,QAAA,gBACpF9D,OAAA,CAACb,QAAQ;YAACoF,KAAK,EAAE,GAAI;YAACC,MAAM,EAAE,GAAI;YAAChE,IAAI,EAAE+B,mBAAmB,CAAC,CAAE;YAAAuB,QAAA,gBAC7D9D,OAAA,CAACT,aAAa;cAACkF,eAAe,EAAC;YAAK;cAAAV,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACvClE,OAAA,CAACX,KAAK;cAACqF,OAAO,EAAC;YAAM;cAAAX,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACxBlE,OAAA,CAACV,KAAK;cAAAyE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACTlE,OAAA,CAACR,OAAO;cAAAuE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACXlE,OAAA,CAACP,MAAM;cAAAsE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACVlE,OAAA,CAACZ,GAAG;cAACsF,OAAO,EAAC,OAAO;cAACC,IAAI,EAAC;YAAS;cAAAZ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9B,CAAC,eACXlE,OAAA,CAACN,QAAQ;YAAC6E,KAAK,EAAE,GAAI;YAACC,MAAM,EAAE,GAAI;YAAAV,QAAA,gBAChC9D,OAAA,CAACL,GAAG;cAACa,IAAI,EAAEmC,wBAAwB,CAAC,CAAE;cAAC+B,OAAO,EAAC,OAAO;cAACE,OAAO,EAAC,MAAM;cAACC,EAAE,EAAC,KAAK;cAACC,EAAE,EAAC,KAAK;cAACC,WAAW,EAAE,EAAG;cAACJ,IAAI,EAAC,SAAS;cAACK,KAAK;cAAAlB,QAAA,EAEzHnB,wBAAwB,CAAC,CAAC,CAACrB,GAAG,CAAC,CAAC2D,KAAK,EAAEC,KAAK,kBAAKlF,OAAA,CAACJ,IAAI;gBAAuB+E,IAAI,EAAG,IAAGQ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,QAAQ,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAE;cAAE,GAA9E,QAAOJ,KAAM,EAAC;gBAAAnB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAkE,CAAC;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAE9I,CAAC,eACNlE,OAAA,CAACR,OAAO;cAAAuE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACXlE,OAAA,CAACP,MAAM;cAAAsE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACR,CAAC,eACNlE,OAAA,CAACH,SAAS;UAAC0E,KAAK,EAAE,GAAI;UAACC,MAAM,EAAE,GAAI;UAAChE,IAAI,EAAEL,UAAW;UAAA2D,QAAA,gBACnD9D,OAAA,CAACT,aAAa;YAACkF,eAAe,EAAC;UAAK;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACvClE,OAAA,CAACX,KAAK;YAACqF,OAAO,EAAC;UAAM;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACxBlE,OAAA,CAACV,KAAK;YAAAyE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACTlE,OAAA,CAACR,OAAO;YAAAuE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACXlE,OAAA,CAACP,MAAM;YAAAsE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACVlE,OAAA,CAACF,IAAI;YAACyF,IAAI,EAAC,UAAU;YAACb,OAAO,EAAC,YAAY;YAACc,MAAM,EAAC;UAAS;YAAAzB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrD,CAAC,eACZlE,OAAA;UAAA8D,QAAA,gBACE9D,OAAA;YAAA8D,QAAA,EAAI;UAAoB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC7BlE,OAAA;YAAA8D,QAAA,EACGD,kBAAkB,CAACvC,GAAG,CAAC,CAAC,CAACmE,WAAW,EAAEtE,QAAQ,CAAC,kBAC9CnB,OAAA;cAAA8D,QAAA,GAAuB2B,WAAW,EAAC,IAAE,EAACtE,QAAQ,EAAC,QAAM;YAAA,GAA5CsE,WAAW;cAAA1B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAqC,CAC1D;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CAAC,eACRlE,OAAA,CAAChB,KAAK;MAAA8E,QAAA,eAEJ9D,OAAA,CAACf,SAAS;QAAA6E,QAAA,eACR9D,OAAA;UAAKmE,KAAK,EAAE;YAAEC,OAAO,EAAE,MAAM;YAAEC,cAAc,EAAE,cAAc;YAAEC,YAAY,EAAE;UAAO,CAAE;UAAAR,QAAA,gBAEpF9D,OAAA,CAACb,QAAQ;YAACoF,KAAK,EAAE,GAAI;YAACC,MAAM,EAAE,GAAI;YAAChE,IAAI,EAAEG,wBAAwB,CAAC,CAAE;YAAAmD,QAAA,gBAClE9D,OAAA,CAACT,aAAa;cAACkF,eAAe,EAAC;YAAK;cAAAV,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACvClE,OAAA,CAACX,KAAK;cAACqF,OAAO,EAAC;YAAU;cAAAX,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eAC5BlE,OAAA,CAACV,KAAK;cAAAyE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACTlE,OAAA,CAACR,OAAO;cAAAuE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACXlE,OAAA,CAACP,MAAM;cAAAsE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACVlE,OAAA,CAACZ,GAAG;cAACsF,OAAO,EAAC,YAAY;cAACC,IAAI,EAAC;YAAS;cAAAZ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnC,CAAC,eAEXlE,OAAA,CAACH,SAAS;YAAC0E,KAAK,EAAE,GAAI;YAACC,MAAM,EAAE,GAAI;YAAChE,IAAI,EAAEgB,qBAAqB,CAAC,CAAE;YAAAsC,QAAA,gBAChE9D,OAAA,CAACT,aAAa;cAACkF,eAAe,EAAC;YAAK;cAAAV,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACvClE,OAAA,CAACX,KAAK;cAACqF,OAAO,EAAC;YAAM;cAAAX,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACxBlE,OAAA,CAACV,KAAK;cAAAyE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACTlE,OAAA,CAACR,OAAO;cAAAuE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACXlE,OAAA,CAACP,MAAM;cAAAsE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACVlE,OAAA,CAACF,IAAI;cAACyF,IAAI,EAAC,UAAU;cAACb,OAAO,EAAC,YAAY;cAACc,MAAM,EAAC;YAAS;cAAAzB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACrD,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACT;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV;AAAChE,EAAA,CArLuBD,YAAY;AAAAyF,EAAA,GAAZzF,YAAY;AAAA,IAAAyF,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}