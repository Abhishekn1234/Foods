{"ast":null,"code":"// ContextReducer.js\nimport React,{createContext,useContext,useReducer}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const CartStateContext=/*#__PURE__*/createContext();const CartDispatchContext=/*#__PURE__*/createContext();const reducer=(state,action)=>{switch(action.type){case'ADD_TO_CART':const existingCartItemIndex=state.findIndex(item=>item.name===action.payload.name&&item.option===action.payload.option);if(existingCartItemIndex!==-1){// If the same item with the same option is already in the cart, update its quantity\nreturn state.map((item,index)=>index===existingCartItemIndex?{...item,quantity:item.quantity+action.payload.quantity}:item);}else{// If it's a new item or a new option, add it to the cart\nreturn[...state,action.payload];}case'UPDATE_QUANTITY':return state.map((item,index)=>index===action.payload.index?{...item,quantity:action.payload.quantity}:item);case'REMOVE_FROM_CART':return state.filter((_,index)=>index!==action.payload);case'CLEAR_CART':return[];case'UPDATE_CART':return action.payload;case'SET_USER':// Simply return the state without modifying it as the user context handles user data\nreturn state;default:return state;}};export const CartProvider=_ref=>{let{children}=_ref;const[state,dispatch]=useReducer(reducer,[]);return/*#__PURE__*/_jsx(CartDispatchContext.Provider,{value:dispatch,children:/*#__PURE__*/_jsx(CartStateContext.Provider,{value:state,children:children})});};export const useCart=()=>useContext(CartStateContext);export const useDispatchCart=()=>useContext(CartDispatchContext);export default reducer;","map":{"version":3,"names":["React","createContext","useContext","useReducer","jsx","_jsx","CartStateContext","CartDispatchContext","reducer","state","action","type","existingCartItemIndex","findIndex","item","name","payload","option","map","index","quantity","filter","_","CartProvider","_ref","children","dispatch","Provider","value","useCart","useDispatchCart"],"sources":["C:/mern stack-project/Food ordering/frontend/src/components/Contextreducer.js"],"sourcesContent":["// ContextReducer.js\r\nimport React, { createContext, useContext, useReducer } from 'react';\r\n\r\nconst CartStateContext = createContext();\r\nconst CartDispatchContext = createContext();\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_TO_CART':\r\n      const existingCartItemIndex = state.findIndex(item => (\r\n        item.name === action.payload.name && item.option === action.payload.option\r\n      ));\r\n\r\n      if (existingCartItemIndex !== -1) {\r\n        // If the same item with the same option is already in the cart, update its quantity\r\n        return state.map((item, index) =>\r\n          index === existingCartItemIndex ? { ...item, quantity: item.quantity + action.payload.quantity } : item\r\n        );\r\n      } else {\r\n        // If it's a new item or a new option, add it to the cart\r\n        return [...state, action.payload];\r\n      }\r\n\r\n    case 'UPDATE_QUANTITY':\r\n      return state.map((item, index) =>\r\n        index === action.payload.index ? { ...item, quantity: action.payload.quantity } : item\r\n      );\r\n    case 'REMOVE_FROM_CART':\r\n      return state.filter((_, index) => index !== action.payload);\r\n    case 'CLEAR_CART':\r\n      return [];\r\n    case 'UPDATE_CART':\r\n      return action.payload;\r\n    case 'SET_USER':\r\n      // Simply return the state without modifying it as the user context handles user data\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n\r\nexport const CartProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, []);\r\n  return (\r\n    <CartDispatchContext.Provider value={dispatch}>\r\n      <CartStateContext.Provider value={state}>\r\n        {children}\r\n      </CartStateContext.Provider>\r\n    </CartDispatchContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useCart = () => useContext(CartStateContext);\r\nexport const useDispatchCart = () => useContext(CartDispatchContext);\r\nexport default reducer;\r\n"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,UAAU,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAErE,KAAM,CAAAC,gBAAgB,cAAGL,aAAa,CAAC,CAAC,CACxC,KAAM,CAAAM,mBAAmB,cAAGN,aAAa,CAAC,CAAC,CAE3C,KAAM,CAAAO,OAAO,CAAGA,CAACC,KAAK,CAAEC,MAAM,GAAK,CACjC,OAAQA,MAAM,CAACC,IAAI,EACjB,IAAK,aAAa,CAChB,KAAM,CAAAC,qBAAqB,CAAGH,KAAK,CAACI,SAAS,CAACC,IAAI,EAChDA,IAAI,CAACC,IAAI,GAAKL,MAAM,CAACM,OAAO,CAACD,IAAI,EAAID,IAAI,CAACG,MAAM,GAAKP,MAAM,CAACM,OAAO,CAACC,MACrE,CAAC,CAEF,GAAIL,qBAAqB,GAAK,CAAC,CAAC,CAAE,CAChC;AACA,MAAO,CAAAH,KAAK,CAACS,GAAG,CAAC,CAACJ,IAAI,CAAEK,KAAK,GAC3BA,KAAK,GAAKP,qBAAqB,CAAG,CAAE,GAAGE,IAAI,CAAEM,QAAQ,CAAEN,IAAI,CAACM,QAAQ,CAAGV,MAAM,CAACM,OAAO,CAACI,QAAS,CAAC,CAAGN,IACrG,CAAC,CACH,CAAC,IAAM,CACL;AACA,MAAO,CAAC,GAAGL,KAAK,CAAEC,MAAM,CAACM,OAAO,CAAC,CACnC,CAEF,IAAK,iBAAiB,CACpB,MAAO,CAAAP,KAAK,CAACS,GAAG,CAAC,CAACJ,IAAI,CAAEK,KAAK,GAC3BA,KAAK,GAAKT,MAAM,CAACM,OAAO,CAACG,KAAK,CAAG,CAAE,GAAGL,IAAI,CAAEM,QAAQ,CAAEV,MAAM,CAACM,OAAO,CAACI,QAAS,CAAC,CAAGN,IACpF,CAAC,CACH,IAAK,kBAAkB,CACrB,MAAO,CAAAL,KAAK,CAACY,MAAM,CAAC,CAACC,CAAC,CAAEH,KAAK,GAAKA,KAAK,GAAKT,MAAM,CAACM,OAAO,CAAC,CAC7D,IAAK,YAAY,CACf,MAAO,EAAE,CACX,IAAK,aAAa,CAChB,MAAO,CAAAN,MAAM,CAACM,OAAO,CACvB,IAAK,UAAU,CACb;AACA,MAAO,CAAAP,KAAK,CACd,QACE,MAAO,CAAAA,KAAK,CAChB,CACF,CAAC,CAGD,MAAO,MAAM,CAAAc,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC,KAAM,CAACf,KAAK,CAAEiB,QAAQ,CAAC,CAAGvB,UAAU,CAACK,OAAO,CAAE,EAAE,CAAC,CACjD,mBACEH,IAAA,CAACE,mBAAmB,CAACoB,QAAQ,EAACC,KAAK,CAAEF,QAAS,CAAAD,QAAA,cAC5CpB,IAAA,CAACC,gBAAgB,CAACqB,QAAQ,EAACC,KAAK,CAAEnB,KAAM,CAAAgB,QAAA,CACrCA,QAAQ,CACgB,CAAC,CACA,CAAC,CAEnC,CAAC,CAED,MAAO,MAAM,CAAAI,OAAO,CAAGA,CAAA,GAAM3B,UAAU,CAACI,gBAAgB,CAAC,CACzD,MAAO,MAAM,CAAAwB,eAAe,CAAGA,CAAA,GAAM5B,UAAU,CAACK,mBAAmB,CAAC,CACpE,cAAe,CAAAC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}